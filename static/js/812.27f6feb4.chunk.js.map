{"version":3,"file":"static/js/812.27f6feb4.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/contactForm.module.css?2173","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/contactListItem.module.css?d502","components/ContactListItem/ContactListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/PhonebookPage.module.css?9cfe","pages/PhonebookPage.js"],"sourcesContent":["// import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\n// export const selectFilteredContacts = createSelector(\n//     [selectContacts, selectFilter], (contacts, filter) => {\n//         return contacts.filter(contact =>\n//             contact.name.toLowerCase().includes(filter.toLowerCase())\n//         )\n//     }\n\n// )\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"contactForm_contactForm__f4X+T\",\"button\":\"contactForm_button__JixDz\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport css from './contactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const newContact = {\n      name: form.name.value,\n      number: form.number.value,\n    };\n    console.log(newContact);\n    let contactExist = false;\n\n    contacts.forEach(contact => {\n      if (contact.name.toLowerCase() === newContact.name.toLowerCase()) {\n        alert(`${newContact.name} is already in contacts.`);\n        contactExist = true;\n      }\n    });\n\n    if (!contactExist) {\n      dispatch(addContact(newContact));\n    }\n\n    form.reset();\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  return (\n    <form onSubmit={handleSubmit} className={css.contactForm}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label htmlFor=\"number\">Number</label>\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\" className={css.button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n  addNewContact: PropTypes.func,\n};\n\n// export default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"filter_filterContainer__2RGKp\",\"filter\":\"filter_filter__HJEMj\",\"inputFilter\":\"filter_inputFilter__hPQUa\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { nanoid } from 'nanoid';\nimport css from './filter.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <div className={css.filterContainer}>\n      <label className={css.filter}>\n        Find contact by name\n        <input\n          className={css.inputFilter}\n          id={filterId}\n          type=\"search\"\n          onChange={handleChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n// export default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactListItem\":\"contactListItem_contactListItem__frbh7\",\"deleteButton\":\"contactListItem_deleteButton__bbsu0\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport css from './contactListItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleOnClick = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  return (\n    <li className={css.contactListItem}>\n      {contact.name} : {contact.phone}\n      <button\n        className={css.deleteButton}\n        type=\"button\"\n        onClick={handleOnClick}\n        data-id={contact.id}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.objectOf(PropTypes.string),\n  deleteContact: PropTypes.func,\n};\n\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contactList_contactList__rfM1N\"};","import { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter, selectIsLoading } from 'redux/selectors';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport css from './contactList.module.css';\nimport PropTypes from 'prop-types';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return (\n    <ul className={css.contactList}>\n      {!!isLoading && <b>Loading contacts...</b>}\n      {filteredContacts.map(contact => (\n        <ContactListItem\n          key={contact.id}\n          contact={contact}\n        \n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n\n};\n\n// export default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PhonebookPage_wrapper__Gm1sD\",\"section\":\"PhonebookPage_section__gklE8\",\"title\":\"PhonebookPage_title__fKUHY\"};","\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport css from './PhonebookPage.module.css';\nimport { Helmet } from 'react-helmet';\n\nexport default function PhonebookPage () {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.wrapper}>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <section className={css.section}>\n        <ContactForm />\n      </section>\n      <section className={css.section}>\n        <h2 className={css.title}>Contacts</h2>\n        <Filter />\n        <div>{isLoading && 'In progress'}</div>\n        <ContactList />\n      </section>\n    </div>\n  );\n};\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","useSelector","nameInputId","numberInputId","onSubmit","event","preventDefault","form","target","newContact","name","value","number","console","log","contactExist","forEach","contact","toLowerCase","alert","addContact","reset","className","css","htmlFor","type","pattern","title","required","Filter","filterId","onChange","setFilter","currentTarget","phone","onClick","deleteContact","ContactList","filteredContacts","includes","map","PhonebookPage","useEffect","fetchContacts","Helmet"],"sourceRoot":""}